_append_to_path() {
    if [ -d $1 -a -z ${path[(r)$1]} ]; then
        path=($1 $path);
    fi
}

_has() {
      return $( whence $1 >/dev/null )
}

function flac_to_alac()
{
    mkdir alac;
    for f in *.flac
    do
            ffmpeg -i "$f" -vn -acodec alac "alac/${f%.flac}.m4a"
    done
}

function flac_to_mp3()
{
    mkdir mp3;
    for f in *.flac
    do
            ffmpeg -i "$f" -vn -ab 196k -ac 2 -ar 48000 "mp3/${f%.flac}.mp3"
    done
}

function flac_to_320_mp3()
{
    mkdir mp3_320;
    for f in *.flac
    do
            ffmpeg -i "$f" -vn -ab 320k -ac 2 "mp3_320/${f%.flac}.mp3"
    done
}

function kernel-compile()
{
    TAG=${1:-master}
    cd /kernel/linux
    mv .config ../
    make mrproper
    git fetch
    git checkout $TAG
    git pull
    mv ../.config .
    make oldconfig
    make menuconfig
    make -j9

    echo -e "\nKernel is compiled. Please install it (and modules too)"
    echo -e "\n# make install"
    echo -e "\n# make modules_install"
}

function resize()
{
    RESIZE=$1
    mkdir resize
    for pic in *
    do
            convert -resize $RESIZE "$pic" "resize/$pic"
    done
}

function cp1250toUtf8() {
    iconv -f WINDOWS-1250 -t UTF-8 < "$1" > tmpfile
}

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$_";
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
        if [[ -n "$@" ]]; then
            du $arg -- "$@";
        else
            du $arg .[^.]* *;
    fi;
}

# Create a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1");
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8";
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified.";
        return 1;
    fi;

    local domain="${1}";
    echo "Testing ${domain}â€¦";
    echo ""; # newline

    local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
        | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText=$(echo "${tmp}" \
            | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
            no_serial, no_sigdump, no_signame, no_validity, no_version");
        echo "Common Name:";
        echo ""; # newline
        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//";
        echo ""; # newline
        echo "Subject Alternative Name(s):";
        echo ""; # newline
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
            | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2;
        return 0;
    else
        echo "ERROR: Certificate not found.";
        return 1;
    fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
    if [ $# -eq 0 ]; then
        vim .;
    else
        vim "$@";
    fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

if [ $OS = "Darwin" ]
then

  # Change working directory to the top-most Finder window location
  function cdf() { # short for `cdfinder`
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')";
  }

  # `o` with no arguments opens the current directory, otherwise opens the given
  # location
  function o() {
    if [ $# -eq 0 ]; then
        open .;
    else
        open "$@";
    fi;
  }
 fi
